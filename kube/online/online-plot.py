from kubernetes import client, config, watch
from kubernetes.client.rest import ApiException

from pprint import pprint
import time
import json
import math
import argparse

import matplotlib.pyplot as plt
import matplotlib.animation as animation
from matplotlib import style
import numpy as np
from statsmodels.tsa.api import ExponentialSmoothing
from statsmodels.tsa.holtwinters import SimpleExpSmoothing
from sklearn.metrics import mean_squared_error
from pandas import read_csv
from matplotlib import pyplot
import threading

import warnings
from statsmodels.tools.sm_exceptions import ConvergenceWarning
warnings.simplefilter('ignore', ConvergenceWarning)
warnings.simplefilter(action='ignore', category=FutureWarning)

# Import seaborn
import seaborn as sns

#PARAMETERS
params = {
    "window_future": 24, 
    "window_past": 1, 
    "lstm_target": 90, 
    "lstm_upper": 98, 
    "lstm_lower": 60, 
    "pred_target": 90, 
    "HW_upper": 98, 
    "HW_lower": 60, 
    "season_len": 144, 
    "history_len": 4*144, 
    "rescale_buffer": 120, 
    "rescale_cooldown": 18, 
}
#--------------------------------------------------------------

# Apply the default theme
sns.set_theme()


parser = argparse.ArgumentParser()

parser.add_argument("-d", "--dep_name", help="Deployment name", default="nginx-deployment")
parser.add_argument("-c", "--cont_name", help="Container name", default="nginx")
parser.add_argument("-v", "--vpa_name", help="VPA name", default="my-rec-vpa")



args = parser.parse_args()

# Plots 
fig1 = plt.figure(1)
fig2 = plt.figure(2)
ax1 = fig1.add_subplot(1,1,1)
ax2 = fig2.add_subplot(1,1,1)

# Record VPA or not
plotVPA = True

# Use LSTM or HW
use_lstm = True
print("use_lstm:", use_lstm)

vpa_x = []
vpa_targets = []
vpa_lowers = []
vpa_uppers = []

cpu_x = []
cpu_usages = []
cpu_requests = []

cpu_x2 = []
cpu_usages2 = []
cpu_requests2 = []

pred_x = []
pred_targets = []
pred_lowers = []
pred_uppers = []

cpu_slacks = []
vpa_slacks = []



def plot_slack():
    global fig2, ax2
    global cpu_slacks, vpa_slacks

    ax2.clear()
    skip = params["season_len"]*2
    #print(cpu_x[skip:])
    #print(cpu_slacks)
    ax2.plot(cpu_x[skip:], cpu_slacks, 'b--', linewidth=2, label='CPU slack')
    ax2.plot(cpu_x[skip:], vpa_slacks, 'g-', linewidth=2, label='VPA slack')
    ax2.legend(loc='lower center', bbox_to_anchor=(0.5, -0.30), fancybox=True, shadow=True, ncol=6, fontsize=15)
    ax2.set_xlabel('Time (s)', fontsize=20)
    ax2.set_ylabel('CPU (millicores)', fontsize=20)
   
        
        
# Plot the main graph, do not show
# VPA target, CPU requests/usage, LSTM bounds
def plot_main():
    global fig1, ax1
    global vpa_x, vpa_targets, cpu_x, cpu_usages, vpa_lowers, vpa_uppers, cpu_requests, cpu_x2, cpu_usages2, cpu_requests2, pred_x, pred_targets, pred_lowers, pred_uppers

    ax1.clear()
    
    # ax1.plot(vpa_x, vpa_targets, 'g--', linewidth=1,label='VPA target')
    # ax1.plot(pred_x, pred_targets, 'r-', linewidth=2,label='Prediction target')
    # ax1.fill_between(pred_x, pred_lowers, pred_uppers, facecolor='red', alpha=0.3, label="Prediction bounds")  
    ax1.plot(cpu_x, cpu_requests, 'r--', linewidth=2, label='CPU requested')
    ax1.plot(cpu_x, cpu_usages, 'r-', linewidth=1,label='CPU usage')
    ax1.plot(cpu_x, cpu_requests2, 'b--', linewidth=2, label='CPU requested')
    ax1.plot(cpu_x, cpu_usages2, 'b-', linewidth=1,label='CPU usage')

    ax1.legend(loc='lower center', bbox_to_anchor=(0.5, -0.30), fancybox=True, shadow=True, ncol=6, fontsize=15)
    ax1.set_xlabel('Observation', fontsize=20)
    ax1.set_ylabel('CPU (millicores)', fontsize=20)
    
        


def main():
    # Configs can be set in Configuration class directly or using helper
    # utility. If no argument provided, the config will be loaded from
    # default location.
    global api_client
    global vpa_x, vpa_targets, cpu_x, cpu_usages, vpa_lowers, vpa_uppers, cpu_requests, cpu_x2, cpu_usages2, cpu_requests2, pred_x, pred_targets, pred_lowers, pred_uppers
    global plotVPA 
    global fig1, fig2, ax1, ax2
    plotVPA = True

    # Fast initialize-------------------------------------------------------
    # np.random.seed(13)
    # series = create_sin_noise(A=300, D=200, per=params["season_len"], total_len=2*params["season_len"])
    # cpu_usages = series.tolist()
    # cpu_usages = [70.945423, 65.442296, 64.409863, 119.784497, 135.455987, 132.949178, 136.771872, 175.153478, 185.904079, 183.262895, 192.68772, 227.425753, 254.816212, 254.478113, 260.506071, 303.346596, 308.617227, 299.22515, 305.235282, 311.828772, 337.069025, 341.031472, 343.669081, 328.119776, 338.280342, 344.441163, 344.441163, 335.140099, 350.777963, 349.91699, 340.089565, 377.237572, 374.370458, 376.32487, 361.708703, 406.344532, 405.11971, 405.017317, 408.076594, 408.210802, 406.260407, 406.374084, 407.719058, 406.356785, 406.362214, 406.362214, 404.446423, 387.809218, 408.078899, 408.078899, 372.243456, 372.243456, 376.154602, 377.50961, 376.743622, 349.482621, 349.482621, 347.499424, 347.499424, 336.362507, 345.883619, 337.922989, 341.92927, 331.631114, 337.574917, 332.435077, 332.435077, 325.964683, 307.368739, 311.580147, 301.298436, 252.496212, 270.463215, 256.371774, 265.598395, 205.370252, 194.007955, 190.262442, 195.444643, 139.251378, 142.869633, 135.796605, 112.902592, 66.472793, 66.472793, 66.193411, 67.865584, 66.77803, 66.77803, 70.657887, 67.437995, 68.226009, 67.539034, 66.349509, 64.506136, 66.219697, 67.510551, 67.991665, 67.068337, 66.33974, 62.580748, 65.642412, 66.541548, 70.586391, 64.729692, 67.637338, 68.881708, 67.422404, 64.984688, 65.97749, 64.506194, 69.634008, 68.147372, 66.590158, 67.052963, 67.052963, 71.358626, 68.882216, 69.519414, 69.519414, 70.228999, 74.246052, 68.462505, 73.169358, 70.098157, 65.387362, 72.08145, 71.065703, 67.787508, 67.787508, 66.458999, 68.932161, 68.626819, 66.414441, 69.212387, 74.520871, 64.554352, 64.477423, 69.332949, 68.953759, 71.484296, 64.172944, 62.394221, 70.175386, 68.779043, 66.403721, 67.570241, 144.856782, 144.856782, 143.247413, 140.610964, 167.288596, 194.501547, 190.03789, 189.772435, 215.651063, 265.392033, 251.205724, 269.74442, 283.230117, 283.230117, 307.84315, 306.034056, 316.582364, 338.444161, 346.708794, 337.349865, 337.349865, 344.826399, 343.451073, 344.821114, 349.517567, 351.68738, 347.484378, 337.902327, 376.243902, 378.518296, 377.202081, 377.202081, 407.452107, 407.452107, 405.998908, 404.946085, 392.102185, 408.492917, 407.493804, 408.369267, 407.863674, 406.321005, 409.703717, 391.433347, 406.054267, 406.771528, 404.792209, 386.355485, 377.29304, 377.407228, 377.480392, 379.254246, 344.950444, 348.037006, 352.364188, 348.345395, 323.045971, 339.935917, 347.251705, 343.856943, 298.840484, 331.755164, 343.582499, 320.213632, 300.478595, 307.248907, 307.812206, 291.884867, 261.702297, 259.051078, 262.933378, 256.393071, 182.59464, 190.104381, 189.615586, 184.850591, 146.253126, 141.016502, 142.792523, 131.8115, 131.8115, 68.825431, 66.605583, 67.565538, 63.642538, 66.383205, 64.75593, 67.763187, 70.798345, 66.71584, 66.490961, 66.544909, 71.078104, 63.922763, 67.359739, 67.359739, 68.505196, 67.824338, 67.923622, 65.67874, 68.718988, 68.718988, 69.227808, 68.567626, 66.236974, 66.717442, 70.859004, 64.59916, 71.125389, 71.233049, 71.233049, 67.978006, 69.599998, 65.841129, 65.242505, 70.706964, 66.175486, 65.676652, 68.72556, 65.771229, 68.517979, 70.358395, 66.507317, 66.69204, 67.858524, 66.551129, 64.101733, 71.257589, 71.290914, 68.487113, 68.487113, 69.81107, 69.81107, 71.721427, 65.040494, 66.710092, 68.665638, 66.996037, 62.962659, 62.962659, 69.487323, 67.348318, 64.879687, 64.16536]
    
    #cpu_slacks: [191.0, 335.0, 335.0, 273.689252, 266.45570499999997, 245.038308, 205.447037, 193.63624, 206.792848, 174.072552, 150.778968, 146.991105, 163.702748, 77.89615900000001, 79.92741000000001, 78.103474, 68.59461599999997, 77.24584599999997, 26.848918000000026, 235.84891800000003, 277.576259, 277.576259, 196.22965399999998, 202.787507, 211.650964, 200.60044499999998, 196.394876, 202.439774, 209.486622, 209.486622, 198.54742900000002, 194.581346, 208.12651599999998, 208.12651599999998, 163.988472, 168.280325, 164.788788, 174.084905, 139.970434, 138.188158, 137.58628199999998, 175.87975, 136.171084, 81.17108400000001, 108.22674799999999, 80.97227199999998, 80.97227199999998, 82.48359699999997, 83.87080700000001, 103.52276, 81.57653699999997, 80.33682499999998, 80.36129699999998, 127.41200400000002, 104.33819799999998, 104.33819799999998, 150.227377, 138.44698599999998, 140.55819200000002, 140.975863, 158.806174, 139.100391, 139.100391, 145.013166, 166.43305600000002, 166.43305600000002, 166.43305600000002, 112.43305600000002, 110.46092099999998, 136.61423000000002, 129.74615599999998, 130.951483, 130.951483, 151.290323, 178.81528300000002, 175.551779, 175.551779, 251.164917, 248.476855, 243.938527, 243.938527, 270.260736, 300.357173, 300.357173, 62.35717299999999, 132.13781899999998, 130.113854, 130.50174199999998, 132.139722, 137.193666, 129.06390299999998, 130.831084, 130.72220199999998, 127.23416, 126.630356, 127.233747, 127.853337, 132.807803, 131.531771, 127.907526, 133.361906, 129.484733, 128.63421, 128.212946, 131.82367399999998, 131.119227, 130.456378, 127.665496, 130.46245, 130.284255, 125.72951, 125.221963, 130.379355, 129.218643, 129.218643, 126.321812, 128.95055200000002, 130.113887, 131.539118, 129.993228, 129.12087300000002, 131.955725, 131.955725, 131.330088, 135.69427000000002, 130.502261, 131.679488, 129.22810099999998, 128.918102, 128.706385, 129.206724, 180.898072, 180.898072, 184.483641, 184.483641, 185.728249, 184.993309, 178.277083, 182.523202, 183.334964, 182.1346, 183.419305, 181.926463, 181.926463, 182.325807, 185.947815, 180.238898, 181.405597, 181.405597, 167.950976, 110.00546800000001, 115.96500800000001, 115.96500800000001, 209.826934, 193.799784, 192.551453, 192.551453, 184.358194, 118.695244, 114.50717900000001, 119.246002, 62.13899300000003, 59.465660000000014, 67.545009, 58.678743999999995, 76.16013700000002, 32.069237999999984, 36.42897199999999, 34.27267899999998, 48.03664900000001, 48.03664900000001, 201.036649, 208.68940700000002, 209.49336499999998, 176.23121600000002, 182.725217, 178.163415, 187.555178, 146.28902900000003, 150.364121, 141.34578499999998, 149.306582, 114.19066600000002, 110.14772900000003, 106.051083, 128.797758, 115.68337200000002, 106.75713100000002, 111.92041499999999, 108.28444400000001, 108.28444400000001, 108.03475800000001, 109.52355399999999, 142.79899999999998, 120.171111, 115.918433, 116.14740799999998, 161.13173, 161.13173, 147.14004899999998, 148.31676099999999, 135.308921, 135.308921, 153.712379, 123.09196100000003, 140.539937, 140.539937, 135.71943199999998, 156.81712299999998, 140.639729, 138.14293199999997, 158.762049, 141.571751, 191.626715, 171.399657, 178.811037, 178.00498800000003, 238.532053, 205.26533899999998, 205.26533899999998, 37.26533899999998, 117.618955, 122.090945, 124.17773600000001, 132.353166, 171.288772, 165.733833, 172.879546, 179.014967, 179.014967, 241.71899200000001, 241.71899200000001, 243.186206, 240.798723, 236.262591, 236.262591, 240.108157, 126.988946, 126.988946, 131.919741, 124.616069, 123.320702, 123.735221, 123.669976, 124.732417, 125.956961, 120.063557, 127.407012, 125.607003, 125.180548, 124.248221, 126.950357, 123.982357, 122.95948, 122.95948, 126.049826, 126.049826, 126.234797, 128.1033, 124.281065, 124.281065, 124.547017, 125.499629, 124.784416, 122.165636, 124.595289, 124.595289, 125.594551, 124.982874, 125.199608, 124.738606, 127.095962, 124.184768, 124.278193, 126.922097, 126.922097, 198.832637, 198.832637, 193.992175, 192.560274, 192.266589, 192.70881300000002, 194.487168, 188.927367, 188.808483, 189.33831, 192.443757, 192.443757, 192.08561, 195.30486, 192.80263300000001, 192.138202, 194.10756700000002, 317.107567, 258.886526, 250.459142, 248.450901, 218.456075, 218.456075, 199.440882, 204.231758, 124.96587399999999, 138.805143, 146.14168, 139.915484, 124.05890499999998, 88.177592, 99.40578099999999, 99.40578099999999, 111.05046599999997, 54.709918000000016, 54.709918000000016, 200.70991800000002, 228.59991200000002, 189.77297600000003, 192.189726, 195.101698, 205.892878, 176.041247, 178.06117899999998, 180.69535100000002, 170.5602, 143.977278, 143.72488399999997, 144.87766800000003, 114.44112000000001, 117.219133, 141.07394499999998, 119.04964899999999, 119.25435900000002, 112.57071400000001, 137.45803999999998, 119.36594100000002, 117.47114499999998, 163.89730400000002, 146.438067, 147.52826900000002, 150.45302299999997, 186.08133099999998, 180.276699, 118.899741, 118.899741, 190.83147400000001, 133.713071, 126.121265, 134.01593400000002, 169.45462099999997, 140.750992, 140.829166, 140.829166, 164.343725, 181.169898, 166.28786300000002, 179.060041, 218.637155, 222.494765, 210.380759, 231.490461, 77.79296099999999, 77.79296099999999, 112.45264499999999, 121.416879, 162.231639, 175.013915, 162.398666, 161.618814, 188.898728, 226.704476, 231.042122, 227.00196599999998, 235.30746, 228.238791, 228.465196, 230.056163, 226.447957, 232.319116, 232.319116, 128.319116, 127.180487, 124.878845, 124.159079, 129.325547, 125.53449, 127.378479, 124.60447, 127.42002500000001, 126.082224, 122.242722, 123.248639, 126.46732800000001, 126.52827500000001, 123.289301, 120.23263, 119.475041, 120.861093, 122.667861, 124.668812, 124.020848, 122.753573, 123.232091, 123.383466, 123.094648, 118.741485, 124.860842, 120.280941, 127.62679800000001, 125.328716, 126.128658, 127.43437399999999, 127.701133, 125.786052, 123.501592, 126.805544, 126.805544, 200.805544, 202.430321, 197.852206, 201.858878, 201.858878, 199.00598300000001, 204.451653, 196.030948, 194.460416, 194.988441, 197.797369, 198.472555, 201.746069, 197.487735, 197.487735, 202.078478, 186.357284, 305.357284]
    
    cpu_usages = [0, 44.194088, 66.672243, 67.20843, 68.269816, 70.955355, 68.141558, 67.10972, 66.569147, 66.182909, 66.328612, 66.180101, 67.174776, 67.409726, 65.626838, 60.886117, 71.751059, 71.751059, 68.587293, 69.596884, 62.955316, 67.801081, 64.841633, 66.55274, 63.519489, 61.639308, 69.77357, 67.671362, 63.701319, 68.942016, 68.100297, 64.947586, 64.261384, 66.051729, 65.835334, 65.835334, 66.5302, 68.936521, 64.337761, 66.966006, 69.4507, 68.132172, 63.71299, 67.763285, 66.857214, 64.972442, 63.764483, 67.777163, 69.345651, 69.345651, 68.98263, 66.065898, 72.988005, 69.272933, 70.694434, 70.06349, 68.630509, 68.997151, 69.401758, 65.880416, 65.052006, 70.436174, 67.438679, 71.043669, 68.591527, 69.201178, 68.846388, 63.513478, 66.442203, 68.631673, 69.854694, 67.19619, 68.417565, 60.477186, 60.477186, 65.719814, 78.813254, 136.474865, 143.801339, 197.299112, 197.299112, 193.701513, 261.611301, 252.003285, 268.716882, 302.122765, 298.580275, 312.278506, 337.707294, 312.366928, 342.672877, 338.41978, 327.686661, 348.997748, 346.947245, 361.463112, 376.000766, 371.639795, 403.560706, 390.859148, 403.559265, 405.58271, 408.772733, 406.491938, 386.820293, 404.571533, 386.842153, 378.183442, 376.653209, 327.908796, 349.199592, 350.424748, 342.602247, 340.119578, 325.52758, 323.057698, 333.028347, 310.225609, 300.748379, 280.245991, 248.748265, 248.748265, 249.60045, 195.491542, 186.379961, 132.130468, 132.130468, 133.14097, 100.624582, 69.519907, 68.261562, 64.990249, 67.981812, 71.608496, 69.197632, 68.645258, 68.047018, 68.92872, 68.310858, 65.265077, 65.007006, 66.368731]

    cpu_requests
    # -----
    cpu_usages2 = [0, 38.778849, 69.048313, 69.048313, 80.710462, 146.838525, 152.093842, 167.164733, 192.287074, 217.494, 253.429254, 246.490173, 274.96178, 306.656187, 313.080161, 304.878769, 331.296796, 331.296796, 324.752365, 342.853396, 332.014213, 354.260846, 363.324589, 360.689299, 389.033924, 385.286683, 419.346285, 413.899681, 380.023078, 417.674769, 417.674769, 421.825216, 400.278411, 415.9962, 413.376796, 366.640647, 385.389564, 350.631078, 355.044559, 352.840134, 319.072879, 347.347554, 331.41213, 335.161811, 347.12316, 304.319021, 309.993337, 307.253885, 251.99363, 261.087351, 261.087351, 217.283341, 191.271566, 166.446325, 135.264408, 135.247473, 83.689882, 71.430338, 59.529284, 65.89183, 64.2629, 67.064491, 66.309347, 66.309347, 63.886532, 63.083784, 71.69845, 63.753923, 64.558342, 66.295567, 69.904742, 65.48972, 62.015219, 62.686649, 64.06101, 62.543781, 60.458494, 64.306083, 64.884515, 66.441847, 63.679669, 67.27855, 65.225907, 60.247825, 64.287984, 64.908973, 64.908973, 64.213914, 65.829079, 65.728225, 65.857781, 65.574682, 65.760314, 61.455992, 65.603332, 63.234554, 64.917922, 63.173223, 64.081787, 65.576484, 60.842264, 64.982992, 65.136674, 63.530968, 59.611996, 62.944817, 64.346156, 61.190033, 62.50088, 62.50088, 61.791516, 67.27832, 68.366179, 62.120145, 65.612827, 63.976735, 67.165936, 60.345642, 64.686152, 68.071616, 69.506537, 66.842835, 65.511577, 69.33152, 66.94409, 64.499804, 67.999645, 66.868573, 66.030621, 65.244248, 63.66687, 65.749355, 64.944247, 65.069135, 69.784066, 69.1243, 67.241796, 63.828949, 61.842704, 61.842704, 65.789379, 65.366004]

    cpu_requests

    cpu_x = range(len(cpu_usages))
    cpu_x2 = range(len(cpu_usages2))


    # cpu_usages = cpu_usages[:288]
    # cpu_usages = cpu_usages 
    # print(len(cpu_usages))
    # cpu_requests = [700]*len(cpu_usages)
    # cpu_x = range(len(cpu_usages))

    # pred_targets = [np.nan]*len(cpu_usages)
    # pred_lowers = [np.nan]*len(cpu_usages)
    # pred_uppers = [np.nan]*len(cpu_usages)
    # pred_x = range(len(cpu_usages))
    
    # vpa_targets = [np.nan]*len(cpu_usages)
    # vpa_lowers = [np.nan]*len(cpu_usages)
    # vpa_uppers = [np.nan]*len(cpu_usages)
    # vpa_x = range(len(cpu_usages))
    #--------------------------------------------------------------------

# Plot setups ------------------------------------------
    # Set plot title, legend, labels
    fig1.suptitle('nginx pod metrics', fontsize=23)
    fig1.subplots_adjust(left=0.1, bottom=0.2, right=None, top=None, wspace=None, hspace=None)

    #fig2.suptitle('Slack', fontsize=23)
    fig2.subplots_adjust(left=0.1, bottom=0.2, right=None, top=None, wspace=None, hspace=None)

    # Plot settings
    ax1.tick_params(axis="x", labelsize=20) 
    ax1.tick_params(axis="y", labelsize=20) 

    ax2.tick_params(axis="x", labelsize=20) 
    ax2.tick_params(axis="y", labelsize=20) 
    
# ---------------------------------------------------------------------

    #cooldown = params["rescale_cooldown"]

    # ax1.set_xlim(left=params["season_len"]*2) TODO
    # ax2.set_xlim(left=params["season_len"]*2) TODO
    fig1.set_size_inches(15,8)
    fig2.set_size_inches(15,8)




    plot_main()
    # plot_slack()
    
    fig1.savefig("./main"+ args.dep_name +str(len(pred_targets))+".png",bbox_inches='tight')
    # fig2.savefig("./slack"+ args.dep_name +str(len(pred_targets))+".png",bbox_inches='tight')



    
    
    
if __name__ == '__main__':
    main()
